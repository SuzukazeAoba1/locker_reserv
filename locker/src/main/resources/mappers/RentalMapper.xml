<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.globalin.locker.mapper.RentalMapper">

    <!-- ResultMap -->
    <resultMap id="RentalResultMap" type="com.globalin.locker.domain.Rental">
        <id     property="id"        column="ID"/>
        <result property="userId"    column="USER_ID"/>
        <result property="lockerCode"  column="LOCKER_CODE"/>
        <result property="startTime" column="START_TIME"/>
        <result property="endTime"   column="END_TIME"/>
        <result property="status"    column="STATUS"/>
        <result property="createdAt" column="CREATED_AT"/>
        <result property="updatedAt" column="UPDATED_AT"/>
    </resultMap>

    <!-- 공통 컬럼 목록 -->
    <sql id="Rental_Columns">
        ID, USER_ID, LOCKER_CODE, START_TIME, END_TIME, STATUS, CREATED_AT, UPDATED_AT
    </sql>

    <!-- Read: 전체 -->
    <select id="selectAll" resultMap="RentalResultMap">
        SELECT <include refid="Rental_Columns"/>
        FROM RENTALS
        ORDER BY ID
    </select>


    <!-- Read: 단건 (PK) -->
    <select id="selectById" parameterType="long" resultMap="RentalResultMap">
        SELECT <include refid="Rental_Columns"/>
        FROM RENTALS
        WHERE ID = #{id}
    </select>

    <!-- Read: 사용자별 -->
    <select id="selectByUserId" parameterType="long" resultMap="RentalResultMap">
        SELECT <include refid="Rental_Columns"/>
        FROM RENTALS
        WHERE USER_ID = #{userId}
        ORDER BY ID DESC
    </select>

    <!-- Read: 락커별 -->
    <select id="selectByLockerCode" parameterType="long" resultMap="RentalResultMap">
        SELECT <include refid="Rental_Columns"/>
        FROM RENTALS
        WHERE LOCKER_Code = #{lockerCode}
        ORDER BY ID DESC
    </select>

    <!-- 최신 예약 1건 찾기 -->
    <select id="findLatestActiveIdByLocker" parameterType="long" resultType="long">
        SELECT ID
        FROM RENTALS
        WHERE LOCKER_CODE = #{lockerCode}
        AND STATUS IN (1, 2)
        ORDER BY ID DESC
        FETCH FIRST 1 ROWS ONLY
    </select>

    <!-- target: RENTALS.STATUS, UPDATED_AT 만 변경 -->
    <update id="updateRentalStatusOnly">
        UPDATE RENTALS
        SET STATUS = #{toStatus},
        UPDATED_AT = SYSTIMESTAMP
        WHERE ID = #{rentalId}
        <if test="fromStatus != null">
            AND STATUS = #{fromStatus}
        </if>
        <if test="fromStatusList != null and fromStatusList.size() &gt; 0">
            AND STATUS IN
            <foreach collection="fromStatusList" item="st" open="(" separator="," close=")">
                #{st}
            </foreach>
        </if>
    </update>

    <!-- 예약 생성: STATUS=1(예약됨), 시작=지금, 종료=+7일 (RETURNING으로 PK 회수) -->
    <insert id="insertReservation" parameterType="map">
        <!-- 시퀀스 선조회: 생성될 ID를 p.id에 담아줌 -->
        <selectKey keyProperty="id" resultType="long" order="BEFORE">
            SELECT "USER1"."ISEQ$$_112242".NEXTVAL FROM DUAL
        </selectKey>

        INSERT INTO RENTALS (ID, USER_ID, LOCKER_CODE, START_TIME, END_TIME, STATUS)
        VALUES (#{id}, #{userId}, #{lockerCode},
        SYSTIMESTAMP, SYSTIMESTAMP + INTERVAL '7' DAY, 1)
    </insert>


    <!-- 페이징 (Oracle 12c+) -->
    <select id="selectPage" resultMap="RentalResultMap">
        SELECT <include refid="Rental_Columns"/>
        FROM RENTALS
        ORDER BY ID DESC
        OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
    </select>

    <!-- Create: IDENTITY + CREATED_AT DEFAULT 사용 -->
    <insert id="insert"
            parameterType="com.globalin.locker.domain.Rental"
            useGeneratedKeys="true" keyProperty="id" keyColumn="ID">
        INSERT INTO RENTALS (USER_ID, LOCKER_ID, START_TIME, END_TIME, STATUS)
        VALUES (#{userId}, #{lockerId}, #{startTime}, #{endTime}, #{status})
    </insert>

    <!-- Update: UPDATED_AT 자동 갱신 -->
    <update id="update" parameterType="com.globalin.locker.domain.Rental">
        UPDATE RENTALS
        SET USER_ID     = #{userId},
        LOCKER_ID       = #{lockerId},
        START_TIME      = #{startTime},
        END_TIME        = #{endTime},
        STATUS          = #{status},
        UPDATED_AT      = SYSTIMESTAMP
        WHERE ID        = #{id}
    </update>

    <!-- Delete -->
    <delete id="deleteById" parameterType="long">
        DELETE FROM RENTALS WHERE ID = #{id}
    </delete>

</mapper>
